import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class EnhancedATM {
    private static final Map<Integer, Integer> accountBalances = new HashMap<>();
    private static final Map<Integer, Integer> accountPins = new HashMap<>();
    private static final Map<Integer, StringBuilder> accountTransactionHistory = new HashMap<>();
    private static int currentAccount = -1;

    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);

        while (true) {
            if (currentAccount == -1) {
                System.out.print("Enter your account number (or -1 to create a new account): ");
                int accountNumber = sc.nextInt();

                if (accountNumber == -1) {
                    createNewAccount(sc);
                    continue;
                }

                System.out.print("Enter your PIN: ");
                int pin = sc.nextInt();

                if (validateAccount(accountNumber, pin)) {
                    currentAccount = accountNumber;
                } else {
                    System.out.println("Invalid account number or PIN. Please try again.");
                    continue;
                }
            }

            System.out.println("Automated Teller Machine");
            System.out.println("Choose 1 for Withdraw");
            System.out.println("Choose 2 for Deposit");
            System.out.println("Choose 3 for Check Balance");
            System.out.println("Choose 4 for Transaction History");
            System.out.println("Choose 5 to Switch Account");
            System.out.println("Choose 6 for EXIT");
            System.out.print("Choose the operation you want to perform: ");

            int choice = sc.nextInt();

            switch (choice) {
                case 1:
                    withdraw(sc);
                    break;

                case 2:
                    deposit(sc);
                    break;

                case 3:
                    checkBalance();
                    break;

                case 4:
                    viewTransactionHistory();
                    break;

                case 5:
                    currentAccount = -1;
                    break;

                case 6:
                    System.out.println("Thank you for using the ATM. Goodbye!");
                    sc.close();
                    System.exit(0);

                default:
                    System.out.println("Invalid choice. Please choose a valid option.");
            }
            System.out.println("");
        }
    }

    private static void createNewAccount(Scanner sc) {
        System.out.print("Enter your new account number: ");
        int newAccountNumber = sc.nextInt();

        System.out.print("Set your PIN: ");
        int newPin = sc.nextInt();

        accountBalances.put(newAccountNumber, 0);
        accountPins.put(newAccountNumber, newPin);
        accountTransactionHistory.put(newAccountNumber, new StringBuilder("Account created with initial balance: 0\n"));

        System.out.println("Account created successfully!");
    }

    private static boolean validateAccount(int accountNumber, int pin) {
        Integer storedPin = accountPins.get(accountNumber);
        return storedPin != null && storedPin == pin;
    }

    private static void withdraw(Scanner sc) {
        System.out.print("Enter the amount to withdraw: ");
        int withdrawAmount = sc.nextInt();

        int balance = accountBalances.get(currentAccount);

        if (balance >= withdrawAmount) {
            balance -= withdrawAmount;
            accountBalances.put(currentAccount, balance);
            accountTransactionHistory.get(currentAccount).append("Withdrawn: -").append(withdrawAmount).append("\n");
            System.out.println("Please collect your money");
        } else {
            System.out.println("Insufficient Balance");
        }
    }

    private static void deposit(Scanner sc) {
        System.out.print("Enter the amount to deposit: ");
        int depositAmount = sc.nextInt();

        if (depositAmount > 0) {
            int balance = accountBalances.get(currentAccount);
            balance += depositAmount;
            accountBalances.put(currentAccount, balance);
            accountTransactionHistory.get(currentAccount).append("Deposited: ").append(depositAmount).append("\n");
            System.out.println("Your money has been successfully deposited");
        } else {
            System.out.println("Invalid deposit amount");
        }
    }

    private static void checkBalance() {
        int balance = accountBalances.get(currentAccount);
        System.out.println("Balance: " + balance);
    }

    private static void viewTransactionHistory() {
        System.out.println("Transaction History:");
        System.out.println(accountTransactionHistory.get(currentAccount).toString());
    }
}
